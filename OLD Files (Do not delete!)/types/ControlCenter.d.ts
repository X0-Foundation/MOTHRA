/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ControlCenterInterface extends ethers.utils.Interface {
  functions: {
    "begin(address)": FunctionFragment;
    "captureInitialPairState((uint8,uint256,uint256,bool),address,address)": FunctionFragment;
    "capturePairStateAtSessionDetect(uint256,(address,address,address,uint256,uint256,uint8,uint8))": FunctionFragment;
    "chainlinkFeeds(address)": FunctionFragment;
    "changePairStatus(address,address,address,uint8,address)": FunctionFragment;
    "feeRates(uint8)": FunctionFragment;
    "feeStores()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "htzFtm()": FunctionFragment;
    "nextNode()": FunctionFragment;
    "owner()": FunctionFragment;
    "pairFor(address,address)": FunctionFragment;
    "pairs(address)": FunctionFragment;
    "prevNode()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "ruleOutDeviatedPrice(bool,(address,address,address,uint256,uint256,uint8,uint8))": FunctionFragment;
    "ruleOutInvalidLiquidity((address,address,address,uint256,uint256,uint8,uint8))": FunctionFragment;
    "sessionLiquidityChangeLimit()": FunctionFragment;
    "sessionPriceChangeLimit()": FunctionFragment;
    "setFeeRates(uint8,(uint32),address)": FunctionFragment;
    "setFeeStores((address),address)": FunctionFragment;
    "setLiquidityChangeLimit(uint256)": FunctionFragment;
    "setNode(uint8,address,address)": FunctionFragment;
    "setPriceChangeLimit(uint256)": FunctionFragment;
    "tgrBusd()": FunctionFragment;
    "tgrFtm()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wire(address,address)": FunctionFragment;
    "zValuePerRuleOutPercent(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "begin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "captureInitialPairState",
    values: [
      {
        actionType: BigNumberish;
        session: BigNumberish;
        lastSession: BigNumberish;
        isUserAction: boolean;
      },
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "capturePairStateAtSessionDetect",
    values: [
      BigNumberish,
      {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkFeeds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changePairStatus",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeStores", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "htzFtm", values?: undefined): string;
  encodeFunctionData(functionFragment: "nextNode", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairFor",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "pairs", values: [string]): string;
  encodeFunctionData(functionFragment: "prevNode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ruleOutDeviatedPrice",
    values: [
      boolean,
      {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleOutInvalidLiquidity",
    values: [
      {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sessionLiquidityChangeLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sessionPriceChangeLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRates",
    values: [BigNumberish, { accountant: BigNumberish }, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeStores",
    values: [{ accountant: string }, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityChangeLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNode",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceChangeLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tgrBusd", values?: undefined): string;
  encodeFunctionData(functionFragment: "tgrFtm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wire",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "zValuePerRuleOutPercent",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "begin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "captureInitialPairState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "capturePairStateAtSessionDetect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePairStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeRates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeStores", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "htzFtm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prevNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleOutDeviatedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleOutInvalidLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sessionLiquidityChangeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sessionPriceChangeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeStores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityChangeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceChangeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tgrBusd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tgrFtm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wire", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zValuePerRuleOutPercent",
    data: BytesLike
  ): Result;

  events: {
    "Begin()": EventFragment;
    "ChangePairStatus(address,address,address,uint8)": EventFragment;
    "DeenlistToken(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetFeeRates(uint8,tuple)": EventFragment;
    "SetFeeStores(tuple)": EventFragment;
    "SetNode(uint8,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Begin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangePairStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeenlistToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeRates"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeStores"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNode"): EventFragment;
}

export type BeginEvent = TypedEvent<[] & {}>;

export type ChangePairStatusEvent = TypedEvent<
  [string, string, string, number] & {
    pair: string;
    tokenA: string;
    tokenB: string;
    status: number;
  }
>;

export type DeenlistTokenEvent = TypedEvent<
  [string, string] & { token: string; msgSender: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetFeeRatesEvent = TypedEvent<
  [number, [number] & { accountant: number }] & {
    _sessionType: number;
    _feeRates: [number] & { accountant: number };
  }
>;

export type SetFeeStoresEvent = TypedEvent<
  [[string] & { accountant: string }] & {
    _feeStores: [string] & { accountant: string };
  }
>;

export type SetNodeEvent = TypedEvent<
  [number, string] & { nodeType: number; node: string }
>;

export class ControlCenter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ControlCenterInterface;

  functions: {
    begin(
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    captureInitialPairState(
      actionParams: {
        actionType: BigNumberish;
        session: BigNumberish;
        lastSession: BigNumberish;
        isUserAction: boolean;
      },
      input: string,
      output: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    capturePairStateAtSessionDetect(
      session: BigNumberish,
      pairSnapshot: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chainlinkFeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        deviation: BigNumber;
        heartbeat: BigNumber;
        decimal: BigNumber;
        gap: BigNumber;
        proxy: string;
      }
    >;

    changePairStatus(
      pair: string,
      token0: string,
      token1: string,
      status: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { accountant: number }>;

    feeStores(
      overrides?: CallOverrides
    ): Promise<[string] & { accountant: string }>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    htzFtm(overrides?: CallOverrides): Promise<[string]>;

    nextNode(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairFor(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        token0: string;
        token1: string;
        status: number;
      }
    >;

    prevNode(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ruleOutDeviatedPrice(
      isNichePair: boolean,
      pairSnapshot: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ruleOutInvalidLiquidity(
      ps: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[void]>;

    sessionLiquidityChangeLimit(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sessionPriceChangeLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: { accountant: BigNumberish },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeStores(
      _feeStores: { accountant: string },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityChangeLimit(
      newLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceChangeLimit(
      newLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tgrBusd(overrides?: CallOverrides): Promise<[string]>;

    tgrFtm(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zValuePerRuleOutPercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  begin(
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  captureInitialPairState(
    actionParams: {
      actionType: BigNumberish;
      session: BigNumberish;
      lastSession: BigNumberish;
      isUserAction: boolean;
    },
    input: string,
    output: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  capturePairStateAtSessionDetect(
    session: BigNumberish,
    pairSnapshot: {
      pair: string;
      token0: string;
      token1: string;
      reserve0: BigNumberish;
      reserve1: BigNumberish;
      decimal0: BigNumberish;
      decimal1: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chainlinkFeeds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      deviation: BigNumber;
      heartbeat: BigNumber;
      decimal: BigNumber;
      gap: BigNumber;
      proxy: string;
    }
  >;

  changePairStatus(
    pair: string,
    token0: string,
    token1: string,
    status: BigNumberish,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeRates(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  feeStores(overrides?: CallOverrides): Promise<string>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  htzFtm(overrides?: CallOverrides): Promise<string>;

  nextNode(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairFor(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  pairs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & {
      token0: string;
      token1: string;
      status: number;
    }
  >;

  prevNode(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ruleOutDeviatedPrice(
    isNichePair: boolean,
    pairSnapshot: {
      pair: string;
      token0: string;
      token1: string;
      reserve0: BigNumberish;
      reserve1: BigNumberish;
      decimal0: BigNumberish;
      decimal1: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ruleOutInvalidLiquidity(
    ps: {
      pair: string;
      token0: string;
      token1: string;
      reserve0: BigNumberish;
      reserve1: BigNumberish;
      decimal0: BigNumberish;
      decimal1: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<void>;

  sessionLiquidityChangeLimit(overrides?: CallOverrides): Promise<BigNumber>;

  sessionPriceChangeLimit(overrides?: CallOverrides): Promise<BigNumber>;

  setFeeRates(
    _sessionType: BigNumberish,
    _feeRates: { accountant: BigNumberish },
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeStores(
    _feeStores: { accountant: string },
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityChangeLimit(
    newLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNode(
    nodeType: BigNumberish,
    node: string,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceChangeLimit(
    newLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tgrBusd(overrides?: CallOverrides): Promise<string>;

  tgrFtm(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wire(
    _prevNode: string,
    _nextNode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zValuePerRuleOutPercent(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    begin(caller: string, overrides?: CallOverrides): Promise<void>;

    captureInitialPairState(
      actionParams: {
        actionType: BigNumberish;
        session: BigNumberish;
        lastSession: BigNumberish;
        isUserAction: boolean;
      },
      input: string,
      output: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, BigNumber, BigNumber, number, number] & {
          pair: string;
          token0: string;
          token1: string;
          reserve0: BigNumber;
          reserve1: BigNumber;
          decimal0: number;
          decimal1: number;
        },
        boolean
      ] & {
        pairSnapshot: [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          number
        ] & {
          pair: string;
          token0: string;
          token1: string;
          reserve0: BigNumber;
          reserve1: BigNumber;
          decimal0: number;
          decimal1: number;
        };
        isNichePair: boolean;
      }
    >;

    capturePairStateAtSessionDetect(
      session: BigNumberish,
      pairSnapshot: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    chainlinkFeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        deviation: BigNumber;
        heartbeat: BigNumber;
        decimal: BigNumber;
        gap: BigNumber;
        proxy: string;
      }
    >;

    changePairStatus(
      pair: string,
      token0: string,
      token1: string,
      status: BigNumberish,
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    feeRates(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    feeStores(overrides?: CallOverrides): Promise<string>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    htzFtm(overrides?: CallOverrides): Promise<string>;

    nextNode(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairFor(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    pairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        token0: string;
        token1: string;
        status: number;
      }
    >;

    prevNode(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    ruleOutDeviatedPrice(
      isNichePair: boolean,
      pairSnapshot: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    ruleOutInvalidLiquidity(
      ps: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    sessionLiquidityChangeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    sessionPriceChangeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: { accountant: BigNumberish },
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeStores(
      _feeStores: { accountant: string },
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityChangeLimit(
      newLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceChangeLimit(
      newLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tgrBusd(overrides?: CallOverrides): Promise<string>;

    tgrFtm(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: CallOverrides
    ): Promise<void>;

    zValuePerRuleOutPercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {
    "Begin()"(): TypedEventFilter<[], {}>;

    Begin(): TypedEventFilter<[], {}>;

    "ChangePairStatus(address,address,address,uint8)"(
      pair?: null,
      tokenA?: null,
      tokenB?: null,
      status?: null
    ): TypedEventFilter<
      [string, string, string, number],
      { pair: string; tokenA: string; tokenB: string; status: number }
    >;

    ChangePairStatus(
      pair?: null,
      tokenA?: null,
      tokenB?: null,
      status?: null
    ): TypedEventFilter<
      [string, string, string, number],
      { pair: string; tokenA: string; tokenB: string; status: number }
    >;

    "DeenlistToken(address,address)"(
      token?: null,
      msgSender?: null
    ): TypedEventFilter<[string, string], { token: string; msgSender: string }>;

    DeenlistToken(
      token?: null,
      msgSender?: null
    ): TypedEventFilter<[string, string], { token: string; msgSender: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetFeeRates(uint8,tuple)"(
      _sessionType?: null,
      _feeRates?: null
    ): TypedEventFilter<
      [number, [number] & { accountant: number }],
      { _sessionType: number; _feeRates: [number] & { accountant: number } }
    >;

    SetFeeRates(
      _sessionType?: null,
      _feeRates?: null
    ): TypedEventFilter<
      [number, [number] & { accountant: number }],
      { _sessionType: number; _feeRates: [number] & { accountant: number } }
    >;

    "SetFeeStores(tuple)"(
      _feeStores?: null
    ): TypedEventFilter<
      [[string] & { accountant: string }],
      { _feeStores: [string] & { accountant: string } }
    >;

    SetFeeStores(
      _feeStores?: null
    ): TypedEventFilter<
      [[string] & { accountant: string }],
      { _feeStores: [string] & { accountant: string } }
    >;

    "SetNode(uint8,address)"(
      nodeType?: null,
      node?: null
    ): TypedEventFilter<[number, string], { nodeType: number; node: string }>;

    SetNode(
      nodeType?: null,
      node?: null
    ): TypedEventFilter<[number, string], { nodeType: number; node: string }>;
  };

  estimateGas: {
    begin(
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    captureInitialPairState(
      actionParams: {
        actionType: BigNumberish;
        session: BigNumberish;
        lastSession: BigNumberish;
        isUserAction: boolean;
      },
      input: string,
      output: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    capturePairStateAtSessionDetect(
      session: BigNumberish,
      pairSnapshot: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chainlinkFeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    changePairStatus(
      pair: string,
      token0: string,
      token1: string,
      status: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeRates(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    feeStores(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    htzFtm(overrides?: CallOverrides): Promise<BigNumber>;

    nextNode(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairFor(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    prevNode(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ruleOutDeviatedPrice(
      isNichePair: boolean,
      pairSnapshot: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ruleOutInvalidLiquidity(
      ps: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sessionLiquidityChangeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    sessionPriceChangeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: { accountant: BigNumberish },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeStores(
      _feeStores: { accountant: string },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityChangeLimit(
      newLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceChangeLimit(
      newLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tgrBusd(overrides?: CallOverrides): Promise<BigNumber>;

    tgrFtm(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zValuePerRuleOutPercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    begin(
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    captureInitialPairState(
      actionParams: {
        actionType: BigNumberish;
        session: BigNumberish;
        lastSession: BigNumberish;
        isUserAction: boolean;
      },
      input: string,
      output: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    capturePairStateAtSessionDetect(
      session: BigNumberish,
      pairSnapshot: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chainlinkFeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changePairStatus(
      pair: string,
      token0: string,
      token1: string,
      status: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeStores(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    htzFtm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairFor(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prevNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ruleOutDeviatedPrice(
      isNichePair: boolean,
      pairSnapshot: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ruleOutInvalidLiquidity(
      ps: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sessionLiquidityChangeLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sessionPriceChangeLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: { accountant: BigNumberish },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeStores(
      _feeStores: { accountant: string },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityChangeLimit(
      newLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceChangeLimit(
      newLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tgrBusd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tgrFtm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zValuePerRuleOutPercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
