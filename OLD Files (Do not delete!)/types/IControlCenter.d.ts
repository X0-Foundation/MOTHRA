/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IControlCenterInterface extends ethers.utils.Interface {
  functions: {
    "captureInitialPairState((uint8,uint256,uint256,bool),address,address)": FunctionFragment;
    "capturePairStateAtSessionDetect(uint256,(address,address,address,uint256,uint256,uint8,uint8))": FunctionFragment;
    "ruleOutDeviatedPrice(bool,(address,address,address,uint256,uint256,uint8,uint8))": FunctionFragment;
    "ruleOutInvalidLiquidity((address,address,address,uint256,uint256,uint8,uint8))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "captureInitialPairState",
    values: [
      {
        actionType: BigNumberish;
        session: BigNumberish;
        lastSession: BigNumberish;
        isUserAction: boolean;
      },
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "capturePairStateAtSessionDetect",
    values: [
      BigNumberish,
      {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleOutDeviatedPrice",
    values: [
      boolean,
      {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleOutInvalidLiquidity",
    values: [
      {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "captureInitialPairState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "capturePairStateAtSessionDetect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleOutDeviatedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleOutInvalidLiquidity",
    data: BytesLike
  ): Result;

  events: {};
}

export class IControlCenter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IControlCenterInterface;

  functions: {
    captureInitialPairState(
      actionParams: {
        actionType: BigNumberish;
        session: BigNumberish;
        lastSession: BigNumberish;
        isUserAction: boolean;
      },
      input: string,
      output: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    capturePairStateAtSessionDetect(
      session: BigNumberish,
      pairSnapshot: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ruleOutDeviatedPrice(
      isNichePair: boolean,
      pairSnapshot: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ruleOutInvalidLiquidity(
      ps: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  captureInitialPairState(
    actionParams: {
      actionType: BigNumberish;
      session: BigNumberish;
      lastSession: BigNumberish;
      isUserAction: boolean;
    },
    input: string,
    output: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  capturePairStateAtSessionDetect(
    session: BigNumberish,
    pairSnapshot: {
      pair: string;
      token0: string;
      token1: string;
      reserve0: BigNumberish;
      reserve1: BigNumberish;
      decimal0: BigNumberish;
      decimal1: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ruleOutDeviatedPrice(
    isNichePair: boolean,
    pairSnapshot: {
      pair: string;
      token0: string;
      token1: string;
      reserve0: BigNumberish;
      reserve1: BigNumberish;
      decimal0: BigNumberish;
      decimal1: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ruleOutInvalidLiquidity(
    ps: {
      pair: string;
      token0: string;
      token1: string;
      reserve0: BigNumberish;
      reserve1: BigNumberish;
      decimal0: BigNumberish;
      decimal1: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    captureInitialPairState(
      actionParams: {
        actionType: BigNumberish;
        session: BigNumberish;
        lastSession: BigNumberish;
        isUserAction: boolean;
      },
      input: string,
      output: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, BigNumber, BigNumber, number, number] & {
          pair: string;
          token0: string;
          token1: string;
          reserve0: BigNumber;
          reserve1: BigNumber;
          decimal0: number;
          decimal1: number;
        },
        boolean
      ] & {
        pairSnapshot: [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          number
        ] & {
          pair: string;
          token0: string;
          token1: string;
          reserve0: BigNumber;
          reserve1: BigNumber;
          decimal0: number;
          decimal1: number;
        };
        isNichePair: boolean;
      }
    >;

    capturePairStateAtSessionDetect(
      session: BigNumberish,
      pairSnapshot: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    ruleOutDeviatedPrice(
      isNichePair: boolean,
      pairSnapshot: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    ruleOutInvalidLiquidity(
      ps: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    captureInitialPairState(
      actionParams: {
        actionType: BigNumberish;
        session: BigNumberish;
        lastSession: BigNumberish;
        isUserAction: boolean;
      },
      input: string,
      output: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    capturePairStateAtSessionDetect(
      session: BigNumberish,
      pairSnapshot: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ruleOutDeviatedPrice(
      isNichePair: boolean,
      pairSnapshot: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ruleOutInvalidLiquidity(
      ps: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    captureInitialPairState(
      actionParams: {
        actionType: BigNumberish;
        session: BigNumberish;
        lastSession: BigNumberish;
        isUserAction: boolean;
      },
      input: string,
      output: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    capturePairStateAtSessionDetect(
      session: BigNumberish,
      pairSnapshot: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ruleOutDeviatedPrice(
      isNichePair: boolean,
      pairSnapshot: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ruleOutInvalidLiquidity(
      ps: {
        pair: string;
        token0: string;
        token1: string;
        reserve0: BigNumberish;
        reserve1: BigNumberish;
        decimal0: BigNumberish;
        decimal1: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
