/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IKeep3rInterface extends ethers.utils.Interface {
  functions: {
    "acceptJobMigration(address,address)": FunctionFragment;
    "acceptJobOwnership(address)": FunctionFragment;
    "addDisputer(address)": FunctionFragment;
    "addJob(address)": FunctionFragment;
    "addSlasher(address)": FunctionFragment;
    "addTokenCreditsToJob(address,address,uint256)": FunctionFragment;
    "bondTime()": FunctionFragment;
    "bondedPayment(address,uint256)": FunctionFragment;
    "bonds(address,address)": FunctionFragment;
    "canActivateAfter(address,address)": FunctionFragment;
    "canWithdrawAfter(address,address)": FunctionFragment;
    "changeJobOwnership(address,address)": FunctionFragment;
    "directTokenPayment(address,address,uint256)": FunctionFragment;
    "disputers(address)": FunctionFragment;
    "disputes(address)": FunctionFragment;
    "fee()": FunctionFragment;
    "firstSeen(address)": FunctionFragment;
    "hasBonded(address)": FunctionFragment;
    "isBondedKeeper(address,address,uint256,uint256,uint256)": FunctionFragment;
    "isKeeper(address)": FunctionFragment;
    "jobOwner(address)": FunctionFragment;
    "jobPendingOwner(address)": FunctionFragment;
    "jobTokenCredits(address,address)": FunctionFragment;
    "jobTokenCreditsAddedAt(address,address)": FunctionFragment;
    "jobs()": FunctionFragment;
    "keep3rHelper()": FunctionFragment;
    "keep3rV1()": FunctionFragment;
    "keep3rV1Proxy()": FunctionFragment;
    "keepers()": FunctionFragment;
    "kp3rWethPool()": FunctionFragment;
    "migrateJob(address,address)": FunctionFragment;
    "pendingBonds(address,address)": FunctionFragment;
    "pendingJobMigrations(address)": FunctionFragment;
    "pendingUnbonds(address,address)": FunctionFragment;
    "removeDisputer(address)": FunctionFragment;
    "removeSlasher(address)": FunctionFragment;
    "revoke(address)": FunctionFragment;
    "setBondTime(uint256)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setKeep3rHelper(address)": FunctionFragment;
    "setKeep3rV1(address)": FunctionFragment;
    "setKeep3rV1Proxy(address)": FunctionFragment;
    "setKp3rWethPool(address)": FunctionFragment;
    "setUnbondTime(uint256)": FunctionFragment;
    "slash(address,address,uint256,uint256)": FunctionFragment;
    "slashTokenFromJob(address,address,uint256)": FunctionFragment;
    "slashers(address)": FunctionFragment;
    "unbondTime()": FunctionFragment;
    "withdrawTokenCreditsFromJob(address,address,uint256,address)": FunctionFragment;
    "workCompleted(address)": FunctionFragment;
    "worked(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptJobMigration",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptJobOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addDisputer", values: [string]): string;
  encodeFunctionData(functionFragment: "addJob", values: [string]): string;
  encodeFunctionData(functionFragment: "addSlasher", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addTokenCreditsToJob",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bondTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bondedPayment",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bonds",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "canActivateAfter",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "canWithdrawAfter",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeJobOwnership",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "directTokenPayment",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "disputers", values: [string]): string;
  encodeFunctionData(functionFragment: "disputes", values: [string]): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "firstSeen", values: [string]): string;
  encodeFunctionData(functionFragment: "hasBonded", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isBondedKeeper",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isKeeper", values: [string]): string;
  encodeFunctionData(functionFragment: "jobOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "jobPendingOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "jobTokenCredits",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "jobTokenCreditsAddedAt",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "jobs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "keep3rHelper",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "keep3rV1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "keep3rV1Proxy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "keepers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "kp3rWethPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateJob",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingBonds",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingJobMigrations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingUnbonds",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDisputer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSlasher",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "revoke", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBondTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeep3rHelper",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setKeep3rV1", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setKeep3rV1Proxy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setKp3rWethPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnbondTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slash",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slashTokenFromJob",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "slashers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unbondTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokenCreditsFromJob",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "workCompleted",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "worked", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "acceptJobMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptJobOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDisputer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addSlasher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTokenCreditsToJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bondTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondedPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bonds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canActivateAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canWithdrawAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeJobOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "directTokenPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disputes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "firstSeen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasBonded", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBondedKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isKeeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "jobPendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jobTokenCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jobTokenCreditsAddedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keep3rHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keep3rV1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keep3rV1Proxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keepers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kp3rWethPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrateJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingJobMigrations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingUnbonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDisputer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSlasher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBondTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setKeep3rHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeep3rV1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeep3rV1Proxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKp3rWethPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnbondTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "slashTokenFromJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slashers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unbondTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokenCreditsFromJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "worked", data: BytesLike): Result;

  events: {
    "BondTimeChange(uint256)": EventFragment;
    "Bonding(address,address,uint256)": EventFragment;
    "DisputerAdded(address)": EventFragment;
    "DisputerRemoved(address)": EventFragment;
    "FeeChange(uint256)": EventFragment;
    "InflationPeriodChange(uint256)": EventFragment;
    "JobAddition(address,address)": EventFragment;
    "JobMigrationRequested(address,address)": EventFragment;
    "JobMigrationSuccessful(address,address)": EventFragment;
    "JobOwnershipAssent(address,address,address)": EventFragment;
    "JobOwnershipChange(address,address,address)": EventFragment;
    "JobSlashLiquidity(address,address,address,uint256)": EventFragment;
    "JobSlashToken(address,address,address,uint256)": EventFragment;
    "Keep3rHelperChange(address)": EventFragment;
    "Keep3rV1Change(address)": EventFragment;
    "Keep3rV1ProxyChange(address)": EventFragment;
    "KeeperRevoke(address,address)": EventFragment;
    "KeeperSlash(address,address,uint256)": EventFragment;
    "KeeperValidation(uint256)": EventFragment;
    "KeeperWork(address,address,address,uint256,uint256)": EventFragment;
    "Kp3rWethPoolChange(address)": EventFragment;
    "LiquidityMinimumChange(uint256)": EventFragment;
    "RewardPeriodTimeChange(uint256)": EventFragment;
    "SlasherAdded(address)": EventFragment;
    "SlasherRemoved(address)": EventFragment;
    "TokenCreditAddition(address,address,address,uint256)": EventFragment;
    "TokenCreditWithdrawal(address,address,address,uint256)": EventFragment;
    "UnbondTimeChange(uint256)": EventFragment;
    "Unbonding(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BondTimeChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bonding"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InflationPeriodChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobMigrationRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobMigrationSuccessful"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobOwnershipAssent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobOwnershipChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobSlashLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobSlashToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Keep3rHelperChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Keep3rV1Change"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Keep3rV1ProxyChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperRevoke"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperSlash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperValidation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperWork"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Kp3rWethPoolChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityMinimumChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPeriodTimeChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlasherAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlasherRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCreditAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCreditWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnbondTimeChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unbonding"): EventFragment;
}

export type BondTimeChangeEvent = TypedEvent<
  [BigNumber] & { _bondTime: BigNumber }
>;

export type BondingEvent = TypedEvent<
  [string, string, BigNumber] & {
    _keeper: string;
    _bonding: string;
    _amount: BigNumber;
  }
>;

export type DisputerAddedEvent = TypedEvent<[string] & { _disputer: string }>;

export type DisputerRemovedEvent = TypedEvent<[string] & { _disputer: string }>;

export type FeeChangeEvent = TypedEvent<[BigNumber] & { _fee: BigNumber }>;

export type InflationPeriodChangeEvent = TypedEvent<
  [BigNumber] & { _inflationPeriod: BigNumber }
>;

export type JobAdditionEvent = TypedEvent<
  [string, string] & { _job: string; _jobOwner: string }
>;

export type JobMigrationRequestedEvent = TypedEvent<
  [string, string] & { _fromJob: string; _toJob: string }
>;

export type JobMigrationSuccessfulEvent = TypedEvent<
  [string, string] & { _fromJob: string; _toJob: string }
>;

export type JobOwnershipAssentEvent = TypedEvent<
  [string, string, string] & {
    _job: string;
    _previousOwner: string;
    _newOwner: string;
  }
>;

export type JobOwnershipChangeEvent = TypedEvent<
  [string, string, string] & {
    _job: string;
    _owner: string;
    _pendingOwner: string;
  }
>;

export type JobSlashLiquidityEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    _job: string;
    _liquidity: string;
    _slasher: string;
    _amount: BigNumber;
  }
>;

export type JobSlashTokenEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    _job: string;
    _token: string;
    _slasher: string;
    _amount: BigNumber;
  }
>;

export type Keep3rHelperChangeEvent = TypedEvent<
  [string] & { _keep3rHelper: string }
>;

export type Keep3rV1ChangeEvent = TypedEvent<[string] & { _keep3rV1: string }>;

export type Keep3rV1ProxyChangeEvent = TypedEvent<
  [string] & { _keep3rV1Proxy: string }
>;

export type KeeperRevokeEvent = TypedEvent<
  [string, string] & { _keeper: string; _slasher: string }
>;

export type KeeperSlashEvent = TypedEvent<
  [string, string, BigNumber] & {
    _keeper: string;
    _slasher: string;
    _amount: BigNumber;
  }
>;

export type KeeperValidationEvent = TypedEvent<
  [BigNumber] & { _gasLeft: BigNumber }
>;

export type KeeperWorkEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    _credit: string;
    _job: string;
    _keeper: string;
    _payment: BigNumber;
    _gasLeft: BigNumber;
  }
>;

export type Kp3rWethPoolChangeEvent = TypedEvent<
  [string] & { _kp3rWethPool: string }
>;

export type LiquidityMinimumChangeEvent = TypedEvent<
  [BigNumber] & { _liquidityMinimum: BigNumber }
>;

export type RewardPeriodTimeChangeEvent = TypedEvent<
  [BigNumber] & { _rewardPeriodTime: BigNumber }
>;

export type SlasherAddedEvent = TypedEvent<[string] & { _slasher: string }>;

export type SlasherRemovedEvent = TypedEvent<[string] & { _slasher: string }>;

export type TokenCreditAdditionEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    _job: string;
    _token: string;
    _provider: string;
    _amount: BigNumber;
  }
>;

export type TokenCreditWithdrawalEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    _job: string;
    _token: string;
    _receiver: string;
    _amount: BigNumber;
  }
>;

export type UnbondTimeChangeEvent = TypedEvent<
  [BigNumber] & { _unbondTime: BigNumber }
>;

export type UnbondingEvent = TypedEvent<
  [string, string, BigNumber] & {
    _keeperOrJob: string;
    _unbonding: string;
    _amount: BigNumber;
  }
>;

export class IKeep3r extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IKeep3rInterface;

  functions: {
    acceptJobMigration(
      _fromJob: string,
      _toJob: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptJobOwnership(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addJob(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSlasher(
      _slasher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTokenCreditsToJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bondTime(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _days: BigNumber }>;

    bondedPayment(
      _keeper: string,
      _payment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bonds(
      _keeper: string,
      _bond: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _bonds: BigNumber }>;

    canActivateAfter(
      _keeper: string,
      _bonding: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _timestamp: BigNumber }>;

    canWithdrawAfter(
      _keeper: string,
      _bonding: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _timestamp: BigNumber }>;

    changeJobOwnership(
      _job: string,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    directTokenPayment(
      _token: string,
      _keeper: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disputers(
      _disputer: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isDisputer: boolean }>;

    disputes(
      _keeperOrJob: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _disputed: boolean }>;

    fee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    firstSeen(
      _keeper: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    hasBonded(
      _keeper: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _hasBonded: boolean }>;

    isBondedKeeper(
      _keeper: string,
      _bond: string,
      _minBond: BigNumberish,
      _earned: BigNumberish,
      _age: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    jobOwner(
      _job: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _owner: string }>;

    jobPendingOwner(
      _job: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _pendingOwner: string }>;

    jobTokenCredits(
      _job: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    jobTokenCreditsAddedAt(
      _job: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _timestamp: BigNumber }>;

    jobs(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _jobList: string[] }>;

    keep3rHelper(
      overrides?: CallOverrides
    ): Promise<[string] & { _keep3rHelper: string }>;

    keep3rV1(
      overrides?: CallOverrides
    ): Promise<[string] & { _keep3rV1: string }>;

    keep3rV1Proxy(
      overrides?: CallOverrides
    ): Promise<[string] & { _keep3rV1Proxy: string }>;

    keepers(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _keeperList: string[] }>;

    kp3rWethPool(
      overrides?: CallOverrides
    ): Promise<[string] & { _kp3rWethPool: string }>;

    migrateJob(
      _fromJob: string,
      _toJob: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingBonds(
      _keeper: string,
      _bonding: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _pendingBonds: BigNumber }>;

    pendingJobMigrations(
      _fromJob: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _toJob: string }>;

    pendingUnbonds(
      _keeper: string,
      _bonding: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _pendingUnbonds: BigNumber }>;

    removeDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSlasher(
      _slasher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revoke(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBondTime(
      _bond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeep3rHelper(
      _keep3rHelper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeep3rV1(
      _keep3rV1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeep3rV1Proxy(
      _keep3rV1Proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKp3rWethPool(
      _kp3rWethPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnbondTime(
      _unbond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slash(
      _keeper: string,
      _bonded: string,
      _bondAmount: BigNumberish,
      _unbondAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slashTokenFromJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slashers(
      _slasher: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isSlasher: boolean }>;

    unbondTime(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _days: BigNumber }>;

    withdrawTokenCreditsFromJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    workCompleted(
      _keeper: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _workCompleted: BigNumber }>;

    worked(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptJobMigration(
    _fromJob: string,
    _toJob: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptJobOwnership(
    _job: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDisputer(
    _disputer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addJob(
    _job: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSlasher(
    _slasher: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTokenCreditsToJob(
    _job: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bondTime(overrides?: CallOverrides): Promise<BigNumber>;

  bondedPayment(
    _keeper: string,
    _payment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bonds(
    _keeper: string,
    _bond: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canActivateAfter(
    _keeper: string,
    _bonding: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canWithdrawAfter(
    _keeper: string,
    _bonding: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeJobOwnership(
    _job: string,
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  directTokenPayment(
    _token: string,
    _keeper: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disputers(_disputer: string, overrides?: CallOverrides): Promise<boolean>;

  disputes(_keeperOrJob: string, overrides?: CallOverrides): Promise<boolean>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  firstSeen(_keeper: string, overrides?: CallOverrides): Promise<BigNumber>;

  hasBonded(_keeper: string, overrides?: CallOverrides): Promise<boolean>;

  isBondedKeeper(
    _keeper: string,
    _bond: string,
    _minBond: BigNumberish,
    _earned: BigNumberish,
    _age: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isKeeper(
    _keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  jobOwner(_job: string, overrides?: CallOverrides): Promise<string>;

  jobPendingOwner(_job: string, overrides?: CallOverrides): Promise<string>;

  jobTokenCredits(
    _job: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  jobTokenCreditsAddedAt(
    _job: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  jobs(overrides?: CallOverrides): Promise<string[]>;

  keep3rHelper(overrides?: CallOverrides): Promise<string>;

  keep3rV1(overrides?: CallOverrides): Promise<string>;

  keep3rV1Proxy(overrides?: CallOverrides): Promise<string>;

  keepers(overrides?: CallOverrides): Promise<string[]>;

  kp3rWethPool(overrides?: CallOverrides): Promise<string>;

  migrateJob(
    _fromJob: string,
    _toJob: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingBonds(
    _keeper: string,
    _bonding: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingJobMigrations(
    _fromJob: string,
    overrides?: CallOverrides
  ): Promise<string>;

  pendingUnbonds(
    _keeper: string,
    _bonding: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeDisputer(
    _disputer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSlasher(
    _slasher: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revoke(
    _keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBondTime(
    _bond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeep3rHelper(
    _keep3rHelper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeep3rV1(
    _keep3rV1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeep3rV1Proxy(
    _keep3rV1Proxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKp3rWethPool(
    _kp3rWethPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnbondTime(
    _unbond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slash(
    _keeper: string,
    _bonded: string,
    _bondAmount: BigNumberish,
    _unbondAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slashTokenFromJob(
    _job: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slashers(_slasher: string, overrides?: CallOverrides): Promise<boolean>;

  unbondTime(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawTokenCreditsFromJob(
    _job: string,
    _token: string,
    _amount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  workCompleted(_keeper: string, overrides?: CallOverrides): Promise<BigNumber>;

  worked(
    _keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptJobMigration(
      _fromJob: string,
      _toJob: string,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptJobOwnership(_job: string, overrides?: CallOverrides): Promise<void>;

    addDisputer(_disputer: string, overrides?: CallOverrides): Promise<void>;

    addJob(_job: string, overrides?: CallOverrides): Promise<void>;

    addSlasher(_slasher: string, overrides?: CallOverrides): Promise<void>;

    addTokenCreditsToJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bondTime(overrides?: CallOverrides): Promise<BigNumber>;

    bondedPayment(
      _keeper: string,
      _payment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bonds(
      _keeper: string,
      _bond: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canActivateAfter(
      _keeper: string,
      _bonding: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canWithdrawAfter(
      _keeper: string,
      _bonding: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeJobOwnership(
      _job: string,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    directTokenPayment(
      _token: string,
      _keeper: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    disputers(_disputer: string, overrides?: CallOverrides): Promise<boolean>;

    disputes(_keeperOrJob: string, overrides?: CallOverrides): Promise<boolean>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    firstSeen(_keeper: string, overrides?: CallOverrides): Promise<BigNumber>;

    hasBonded(_keeper: string, overrides?: CallOverrides): Promise<boolean>;

    isBondedKeeper(
      _keeper: string,
      _bond: string,
      _minBond: BigNumberish,
      _earned: BigNumberish,
      _age: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isKeeper(_keeper: string, overrides?: CallOverrides): Promise<boolean>;

    jobOwner(_job: string, overrides?: CallOverrides): Promise<string>;

    jobPendingOwner(_job: string, overrides?: CallOverrides): Promise<string>;

    jobTokenCredits(
      _job: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobTokenCreditsAddedAt(
      _job: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobs(overrides?: CallOverrides): Promise<string[]>;

    keep3rHelper(overrides?: CallOverrides): Promise<string>;

    keep3rV1(overrides?: CallOverrides): Promise<string>;

    keep3rV1Proxy(overrides?: CallOverrides): Promise<string>;

    keepers(overrides?: CallOverrides): Promise<string[]>;

    kp3rWethPool(overrides?: CallOverrides): Promise<string>;

    migrateJob(
      _fromJob: string,
      _toJob: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingBonds(
      _keeper: string,
      _bonding: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingJobMigrations(
      _fromJob: string,
      overrides?: CallOverrides
    ): Promise<string>;

    pendingUnbonds(
      _keeper: string,
      _bonding: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeDisputer(_disputer: string, overrides?: CallOverrides): Promise<void>;

    removeSlasher(_slasher: string, overrides?: CallOverrides): Promise<void>;

    revoke(_keeper: string, overrides?: CallOverrides): Promise<void>;

    setBondTime(_bond: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setKeep3rHelper(
      _keep3rHelper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeep3rV1(_keep3rV1: string, overrides?: CallOverrides): Promise<void>;

    setKeep3rV1Proxy(
      _keep3rV1Proxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setKp3rWethPool(
      _kp3rWethPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnbondTime(
      _unbond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slash(
      _keeper: string,
      _bonded: string,
      _bondAmount: BigNumberish,
      _unbondAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slashTokenFromJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slashers(_slasher: string, overrides?: CallOverrides): Promise<boolean>;

    unbondTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawTokenCreditsFromJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    workCompleted(
      _keeper: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    worked(_keeper: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BondTimeChange(uint256)"(
      _bondTime?: null
    ): TypedEventFilter<[BigNumber], { _bondTime: BigNumber }>;

    BondTimeChange(
      _bondTime?: null
    ): TypedEventFilter<[BigNumber], { _bondTime: BigNumber }>;

    "Bonding(address,address,uint256)"(
      _keeper?: string | null,
      _bonding?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _keeper: string; _bonding: string; _amount: BigNumber }
    >;

    Bonding(
      _keeper?: string | null,
      _bonding?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _keeper: string; _bonding: string; _amount: BigNumber }
    >;

    "DisputerAdded(address)"(
      _disputer?: null
    ): TypedEventFilter<[string], { _disputer: string }>;

    DisputerAdded(
      _disputer?: null
    ): TypedEventFilter<[string], { _disputer: string }>;

    "DisputerRemoved(address)"(
      _disputer?: null
    ): TypedEventFilter<[string], { _disputer: string }>;

    DisputerRemoved(
      _disputer?: null
    ): TypedEventFilter<[string], { _disputer: string }>;

    "FeeChange(uint256)"(
      _fee?: null
    ): TypedEventFilter<[BigNumber], { _fee: BigNumber }>;

    FeeChange(_fee?: null): TypedEventFilter<[BigNumber], { _fee: BigNumber }>;

    "InflationPeriodChange(uint256)"(
      _inflationPeriod?: null
    ): TypedEventFilter<[BigNumber], { _inflationPeriod: BigNumber }>;

    InflationPeriodChange(
      _inflationPeriod?: null
    ): TypedEventFilter<[BigNumber], { _inflationPeriod: BigNumber }>;

    "JobAddition(address,address)"(
      _job?: string | null,
      _jobOwner?: string | null
    ): TypedEventFilter<[string, string], { _job: string; _jobOwner: string }>;

    JobAddition(
      _job?: string | null,
      _jobOwner?: string | null
    ): TypedEventFilter<[string, string], { _job: string; _jobOwner: string }>;

    "JobMigrationRequested(address,address)"(
      _fromJob?: string | null,
      _toJob?: null
    ): TypedEventFilter<[string, string], { _fromJob: string; _toJob: string }>;

    JobMigrationRequested(
      _fromJob?: string | null,
      _toJob?: null
    ): TypedEventFilter<[string, string], { _fromJob: string; _toJob: string }>;

    "JobMigrationSuccessful(address,address)"(
      _fromJob?: null,
      _toJob?: string | null
    ): TypedEventFilter<[string, string], { _fromJob: string; _toJob: string }>;

    JobMigrationSuccessful(
      _fromJob?: null,
      _toJob?: string | null
    ): TypedEventFilter<[string, string], { _fromJob: string; _toJob: string }>;

    "JobOwnershipAssent(address,address,address)"(
      _job?: string | null,
      _previousOwner?: string | null,
      _newOwner?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { _job: string; _previousOwner: string; _newOwner: string }
    >;

    JobOwnershipAssent(
      _job?: string | null,
      _previousOwner?: string | null,
      _newOwner?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { _job: string; _previousOwner: string; _newOwner: string }
    >;

    "JobOwnershipChange(address,address,address)"(
      _job?: string | null,
      _owner?: string | null,
      _pendingOwner?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { _job: string; _owner: string; _pendingOwner: string }
    >;

    JobOwnershipChange(
      _job?: string | null,
      _owner?: string | null,
      _pendingOwner?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { _job: string; _owner: string; _pendingOwner: string }
    >;

    "JobSlashLiquidity(address,address,address,uint256)"(
      _job?: string | null,
      _liquidity?: null,
      _slasher?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _job: string; _liquidity: string; _slasher: string; _amount: BigNumber }
    >;

    JobSlashLiquidity(
      _job?: string | null,
      _liquidity?: null,
      _slasher?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _job: string; _liquidity: string; _slasher: string; _amount: BigNumber }
    >;

    "JobSlashToken(address,address,address,uint256)"(
      _job?: string | null,
      _token?: null,
      _slasher?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _job: string; _token: string; _slasher: string; _amount: BigNumber }
    >;

    JobSlashToken(
      _job?: string | null,
      _token?: null,
      _slasher?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _job: string; _token: string; _slasher: string; _amount: BigNumber }
    >;

    "Keep3rHelperChange(address)"(
      _keep3rHelper?: null
    ): TypedEventFilter<[string], { _keep3rHelper: string }>;

    Keep3rHelperChange(
      _keep3rHelper?: null
    ): TypedEventFilter<[string], { _keep3rHelper: string }>;

    "Keep3rV1Change(address)"(
      _keep3rV1?: null
    ): TypedEventFilter<[string], { _keep3rV1: string }>;

    Keep3rV1Change(
      _keep3rV1?: null
    ): TypedEventFilter<[string], { _keep3rV1: string }>;

    "Keep3rV1ProxyChange(address)"(
      _keep3rV1Proxy?: null
    ): TypedEventFilter<[string], { _keep3rV1Proxy: string }>;

    Keep3rV1ProxyChange(
      _keep3rV1Proxy?: null
    ): TypedEventFilter<[string], { _keep3rV1Proxy: string }>;

    "KeeperRevoke(address,address)"(
      _keeper?: string | null,
      _slasher?: string | null
    ): TypedEventFilter<
      [string, string],
      { _keeper: string; _slasher: string }
    >;

    KeeperRevoke(
      _keeper?: string | null,
      _slasher?: string | null
    ): TypedEventFilter<
      [string, string],
      { _keeper: string; _slasher: string }
    >;

    "KeeperSlash(address,address,uint256)"(
      _keeper?: string | null,
      _slasher?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _keeper: string; _slasher: string; _amount: BigNumber }
    >;

    KeeperSlash(
      _keeper?: string | null,
      _slasher?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _keeper: string; _slasher: string; _amount: BigNumber }
    >;

    "KeeperValidation(uint256)"(
      _gasLeft?: null
    ): TypedEventFilter<[BigNumber], { _gasLeft: BigNumber }>;

    KeeperValidation(
      _gasLeft?: null
    ): TypedEventFilter<[BigNumber], { _gasLeft: BigNumber }>;

    "KeeperWork(address,address,address,uint256,uint256)"(
      _credit?: string | null,
      _job?: string | null,
      _keeper?: string | null,
      _payment?: null,
      _gasLeft?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        _credit: string;
        _job: string;
        _keeper: string;
        _payment: BigNumber;
        _gasLeft: BigNumber;
      }
    >;

    KeeperWork(
      _credit?: string | null,
      _job?: string | null,
      _keeper?: string | null,
      _payment?: null,
      _gasLeft?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        _credit: string;
        _job: string;
        _keeper: string;
        _payment: BigNumber;
        _gasLeft: BigNumber;
      }
    >;

    "Kp3rWethPoolChange(address)"(
      _kp3rWethPool?: null
    ): TypedEventFilter<[string], { _kp3rWethPool: string }>;

    Kp3rWethPoolChange(
      _kp3rWethPool?: null
    ): TypedEventFilter<[string], { _kp3rWethPool: string }>;

    "LiquidityMinimumChange(uint256)"(
      _liquidityMinimum?: null
    ): TypedEventFilter<[BigNumber], { _liquidityMinimum: BigNumber }>;

    LiquidityMinimumChange(
      _liquidityMinimum?: null
    ): TypedEventFilter<[BigNumber], { _liquidityMinimum: BigNumber }>;

    "RewardPeriodTimeChange(uint256)"(
      _rewardPeriodTime?: null
    ): TypedEventFilter<[BigNumber], { _rewardPeriodTime: BigNumber }>;

    RewardPeriodTimeChange(
      _rewardPeriodTime?: null
    ): TypedEventFilter<[BigNumber], { _rewardPeriodTime: BigNumber }>;

    "SlasherAdded(address)"(
      _slasher?: null
    ): TypedEventFilter<[string], { _slasher: string }>;

    SlasherAdded(
      _slasher?: null
    ): TypedEventFilter<[string], { _slasher: string }>;

    "SlasherRemoved(address)"(
      _slasher?: null
    ): TypedEventFilter<[string], { _slasher: string }>;

    SlasherRemoved(
      _slasher?: null
    ): TypedEventFilter<[string], { _slasher: string }>;

    "TokenCreditAddition(address,address,address,uint256)"(
      _job?: string | null,
      _token?: string | null,
      _provider?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _job: string; _token: string; _provider: string; _amount: BigNumber }
    >;

    TokenCreditAddition(
      _job?: string | null,
      _token?: string | null,
      _provider?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _job: string; _token: string; _provider: string; _amount: BigNumber }
    >;

    "TokenCreditWithdrawal(address,address,address,uint256)"(
      _job?: string | null,
      _token?: string | null,
      _receiver?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _job: string; _token: string; _receiver: string; _amount: BigNumber }
    >;

    TokenCreditWithdrawal(
      _job?: string | null,
      _token?: string | null,
      _receiver?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _job: string; _token: string; _receiver: string; _amount: BigNumber }
    >;

    "UnbondTimeChange(uint256)"(
      _unbondTime?: null
    ): TypedEventFilter<[BigNumber], { _unbondTime: BigNumber }>;

    UnbondTimeChange(
      _unbondTime?: null
    ): TypedEventFilter<[BigNumber], { _unbondTime: BigNumber }>;

    "Unbonding(address,address,uint256)"(
      _keeperOrJob?: string | null,
      _unbonding?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _keeperOrJob: string; _unbonding: string; _amount: BigNumber }
    >;

    Unbonding(
      _keeperOrJob?: string | null,
      _unbonding?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _keeperOrJob: string; _unbonding: string; _amount: BigNumber }
    >;
  };

  estimateGas: {
    acceptJobMigration(
      _fromJob: string,
      _toJob: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptJobOwnership(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addJob(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSlasher(
      _slasher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTokenCreditsToJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bondTime(overrides?: CallOverrides): Promise<BigNumber>;

    bondedPayment(
      _keeper: string,
      _payment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bonds(
      _keeper: string,
      _bond: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canActivateAfter(
      _keeper: string,
      _bonding: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canWithdrawAfter(
      _keeper: string,
      _bonding: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeJobOwnership(
      _job: string,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    directTokenPayment(
      _token: string,
      _keeper: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disputers(_disputer: string, overrides?: CallOverrides): Promise<BigNumber>;

    disputes(
      _keeperOrJob: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    firstSeen(_keeper: string, overrides?: CallOverrides): Promise<BigNumber>;

    hasBonded(_keeper: string, overrides?: CallOverrides): Promise<BigNumber>;

    isBondedKeeper(
      _keeper: string,
      _bond: string,
      _minBond: BigNumberish,
      _earned: BigNumberish,
      _age: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    jobOwner(_job: string, overrides?: CallOverrides): Promise<BigNumber>;

    jobPendingOwner(
      _job: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobTokenCredits(
      _job: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobTokenCreditsAddedAt(
      _job: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobs(overrides?: CallOverrides): Promise<BigNumber>;

    keep3rHelper(overrides?: CallOverrides): Promise<BigNumber>;

    keep3rV1(overrides?: CallOverrides): Promise<BigNumber>;

    keep3rV1Proxy(overrides?: CallOverrides): Promise<BigNumber>;

    keepers(overrides?: CallOverrides): Promise<BigNumber>;

    kp3rWethPool(overrides?: CallOverrides): Promise<BigNumber>;

    migrateJob(
      _fromJob: string,
      _toJob: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingBonds(
      _keeper: string,
      _bonding: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingJobMigrations(
      _fromJob: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingUnbonds(
      _keeper: string,
      _bonding: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSlasher(
      _slasher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revoke(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBondTime(
      _bond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeep3rHelper(
      _keep3rHelper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeep3rV1(
      _keep3rV1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeep3rV1Proxy(
      _keep3rV1Proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKp3rWethPool(
      _kp3rWethPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnbondTime(
      _unbond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slash(
      _keeper: string,
      _bonded: string,
      _bondAmount: BigNumberish,
      _unbondAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slashTokenFromJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slashers(_slasher: string, overrides?: CallOverrides): Promise<BigNumber>;

    unbondTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawTokenCreditsFromJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    workCompleted(
      _keeper: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    worked(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptJobMigration(
      _fromJob: string,
      _toJob: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptJobOwnership(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addJob(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSlasher(
      _slasher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTokenCreditsToJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bondTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondedPayment(
      _keeper: string,
      _payment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bonds(
      _keeper: string,
      _bond: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canActivateAfter(
      _keeper: string,
      _bonding: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canWithdrawAfter(
      _keeper: string,
      _bonding: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeJobOwnership(
      _job: string,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    directTokenPayment(
      _token: string,
      _keeper: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disputers(
      _disputer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputes(
      _keeperOrJob: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstSeen(
      _keeper: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasBonded(
      _keeper: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBondedKeeper(
      _keeper: string,
      _bond: string,
      _minBond: BigNumberish,
      _earned: BigNumberish,
      _age: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    jobOwner(
      _job: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobPendingOwner(
      _job: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobTokenCredits(
      _job: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobTokenCreditsAddedAt(
      _job: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keep3rHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keep3rV1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keep3rV1Proxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keepers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kp3rWethPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateJob(
      _fromJob: string,
      _toJob: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingBonds(
      _keeper: string,
      _bonding: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingJobMigrations(
      _fromJob: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingUnbonds(
      _keeper: string,
      _bonding: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSlasher(
      _slasher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBondTime(
      _bond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeep3rHelper(
      _keep3rHelper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeep3rV1(
      _keep3rV1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeep3rV1Proxy(
      _keep3rV1Proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKp3rWethPool(
      _kp3rWethPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnbondTime(
      _unbond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slash(
      _keeper: string,
      _bonded: string,
      _bondAmount: BigNumberish,
      _unbondAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slashTokenFromJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slashers(
      _slasher: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unbondTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawTokenCreditsFromJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    workCompleted(
      _keeper: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    worked(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
