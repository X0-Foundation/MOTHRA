/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IKeep3rHelperParametersInterface extends ethers.utils.Interface {
  functions: {
    "BOOST_BASE()": FunctionFragment;
    "KP3R()": FunctionFragment;
    "keep3rV2()": FunctionFragment;
    "kp3rWethPool()": FunctionFragment;
    "maxBoost()": FunctionFragment;
    "minBoost()": FunctionFragment;
    "setKeep3rV2(address)": FunctionFragment;
    "setKp3rWethPool(address)": FunctionFragment;
    "setMaxBoost(uint256)": FunctionFragment;
    "setMinBoost(uint256)": FunctionFragment;
    "setTargetBond(uint256)": FunctionFragment;
    "setWorkExtraGas(uint256)": FunctionFragment;
    "targetBond()": FunctionFragment;
    "workExtraGas()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BOOST_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "KP3R", values?: undefined): string;
  encodeFunctionData(functionFragment: "keep3rV2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "kp3rWethPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxBoost", values?: undefined): string;
  encodeFunctionData(functionFragment: "minBoost", values?: undefined): string;
  encodeFunctionData(functionFragment: "setKeep3rV2", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setKp3rWethPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBoost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBoost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetBond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWorkExtraGas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "targetBond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "workExtraGas",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BOOST_BASE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "KP3R", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keep3rV2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kp3rWethPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxBoost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minBoost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setKeep3rV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKp3rWethPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWorkExtraGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "targetBond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "workExtraGas",
    data: BytesLike
  ): Result;

  events: {
    "Keep3rV2Change(address)": EventFragment;
    "Kp3rWethPoolChange(address,bool)": EventFragment;
    "MaxBoostChange(uint256)": EventFragment;
    "MinBoostChange(uint256)": EventFragment;
    "TargetBondChange(uint256)": EventFragment;
    "WorkExtraGasChange(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Keep3rV2Change"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Kp3rWethPoolChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxBoostChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinBoostChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetBondChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WorkExtraGasChange"): EventFragment;
}

export type Keep3rV2ChangeEvent = TypedEvent<[string] & { _keep3rV2: string }>;

export type Kp3rWethPoolChangeEvent = TypedEvent<
  [string, boolean] & { _address: string; _isKP3RToken0: boolean }
>;

export type MaxBoostChangeEvent = TypedEvent<
  [BigNumber] & { _maxBoost: BigNumber }
>;

export type MinBoostChangeEvent = TypedEvent<
  [BigNumber] & { _minBoost: BigNumber }
>;

export type TargetBondChangeEvent = TypedEvent<
  [BigNumber] & { _targetBond: BigNumber }
>;

export type WorkExtraGasChangeEvent = TypedEvent<
  [BigNumber] & { _workExtraGas: BigNumber }
>;

export class IKeep3rHelperParameters extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IKeep3rHelperParametersInterface;

  functions: {
    BOOST_BASE(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _base: BigNumber }>;

    KP3R(overrides?: CallOverrides): Promise<[string] & { _kp3r: string }>;

    keep3rV2(
      overrides?: CallOverrides
    ): Promise<[string] & { _keep3rV2: string }>;

    kp3rWethPool(
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { poolAddress: string; isKP3RToken0: boolean }
    >;

    maxBoost(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _multiplier: BigNumber }>;

    minBoost(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _multiplier: BigNumber }>;

    setKeep3rV2(
      _keep3rV2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKp3rWethPool(
      _poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxBoost(
      _maxBoost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinBoost(
      _minBoost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTargetBond(
      _targetBond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWorkExtraGas(
      _workExtraGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    targetBond(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _target: BigNumber }>;

    workExtraGas(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _workExtraGas: BigNumber }>;
  };

  BOOST_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  KP3R(overrides?: CallOverrides): Promise<string>;

  keep3rV2(overrides?: CallOverrides): Promise<string>;

  kp3rWethPool(
    overrides?: CallOverrides
  ): Promise<
    [string, boolean] & { poolAddress: string; isKP3RToken0: boolean }
  >;

  maxBoost(overrides?: CallOverrides): Promise<BigNumber>;

  minBoost(overrides?: CallOverrides): Promise<BigNumber>;

  setKeep3rV2(
    _keep3rV2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKp3rWethPool(
    _poolAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxBoost(
    _maxBoost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinBoost(
    _minBoost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTargetBond(
    _targetBond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWorkExtraGas(
    _workExtraGas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  targetBond(overrides?: CallOverrides): Promise<BigNumber>;

  workExtraGas(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BOOST_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    KP3R(overrides?: CallOverrides): Promise<string>;

    keep3rV2(overrides?: CallOverrides): Promise<string>;

    kp3rWethPool(
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { poolAddress: string; isKP3RToken0: boolean }
    >;

    maxBoost(overrides?: CallOverrides): Promise<BigNumber>;

    minBoost(overrides?: CallOverrides): Promise<BigNumber>;

    setKeep3rV2(_keep3rV2: string, overrides?: CallOverrides): Promise<void>;

    setKp3rWethPool(
      _poolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxBoost(
      _maxBoost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBoost(
      _minBoost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetBond(
      _targetBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWorkExtraGas(
      _workExtraGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    targetBond(overrides?: CallOverrides): Promise<BigNumber>;

    workExtraGas(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Keep3rV2Change(address)"(
      _keep3rV2?: null
    ): TypedEventFilter<[string], { _keep3rV2: string }>;

    Keep3rV2Change(
      _keep3rV2?: null
    ): TypedEventFilter<[string], { _keep3rV2: string }>;

    "Kp3rWethPoolChange(address,bool)"(
      _address?: null,
      _isKP3RToken0?: null
    ): TypedEventFilter<
      [string, boolean],
      { _address: string; _isKP3RToken0: boolean }
    >;

    Kp3rWethPoolChange(
      _address?: null,
      _isKP3RToken0?: null
    ): TypedEventFilter<
      [string, boolean],
      { _address: string; _isKP3RToken0: boolean }
    >;

    "MaxBoostChange(uint256)"(
      _maxBoost?: null
    ): TypedEventFilter<[BigNumber], { _maxBoost: BigNumber }>;

    MaxBoostChange(
      _maxBoost?: null
    ): TypedEventFilter<[BigNumber], { _maxBoost: BigNumber }>;

    "MinBoostChange(uint256)"(
      _minBoost?: null
    ): TypedEventFilter<[BigNumber], { _minBoost: BigNumber }>;

    MinBoostChange(
      _minBoost?: null
    ): TypedEventFilter<[BigNumber], { _minBoost: BigNumber }>;

    "TargetBondChange(uint256)"(
      _targetBond?: null
    ): TypedEventFilter<[BigNumber], { _targetBond: BigNumber }>;

    TargetBondChange(
      _targetBond?: null
    ): TypedEventFilter<[BigNumber], { _targetBond: BigNumber }>;

    "WorkExtraGasChange(uint256)"(
      _workExtraGas?: null
    ): TypedEventFilter<[BigNumber], { _workExtraGas: BigNumber }>;

    WorkExtraGasChange(
      _workExtraGas?: null
    ): TypedEventFilter<[BigNumber], { _workExtraGas: BigNumber }>;
  };

  estimateGas: {
    BOOST_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    KP3R(overrides?: CallOverrides): Promise<BigNumber>;

    keep3rV2(overrides?: CallOverrides): Promise<BigNumber>;

    kp3rWethPool(overrides?: CallOverrides): Promise<BigNumber>;

    maxBoost(overrides?: CallOverrides): Promise<BigNumber>;

    minBoost(overrides?: CallOverrides): Promise<BigNumber>;

    setKeep3rV2(
      _keep3rV2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKp3rWethPool(
      _poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxBoost(
      _maxBoost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinBoost(
      _minBoost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTargetBond(
      _targetBond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWorkExtraGas(
      _workExtraGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    targetBond(overrides?: CallOverrides): Promise<BigNumber>;

    workExtraGas(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BOOST_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    KP3R(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keep3rV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kp3rWethPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxBoost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBoost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setKeep3rV2(
      _keep3rV2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKp3rWethPool(
      _poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxBoost(
      _maxBoost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinBoost(
      _minBoost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTargetBond(
      _targetBond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWorkExtraGas(
      _workExtraGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    targetBond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    workExtraGas(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
