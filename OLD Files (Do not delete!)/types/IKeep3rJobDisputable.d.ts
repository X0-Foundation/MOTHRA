/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IKeep3rJobDisputableInterface extends ethers.utils.Interface {
  functions: {
    "addTokenCreditsToJob(address,address,uint256)": FunctionFragment;
    "jobTokenCreditsAddedAt(address,address)": FunctionFragment;
    "slashTokenFromJob(address,address,uint256)": FunctionFragment;
    "withdrawTokenCreditsFromJob(address,address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTokenCreditsToJob",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "jobTokenCreditsAddedAt",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "slashTokenFromJob",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokenCreditsFromJob",
    values: [string, string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTokenCreditsToJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jobTokenCreditsAddedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashTokenFromJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokenCreditsFromJob",
    data: BytesLike
  ): Result;

  events: {
    "JobSlashLiquidity(address,address,address,uint256)": EventFragment;
    "JobSlashToken(address,address,address,uint256)": EventFragment;
    "TokenCreditAddition(address,address,address,uint256)": EventFragment;
    "TokenCreditWithdrawal(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "JobSlashLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobSlashToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCreditAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCreditWithdrawal"): EventFragment;
}

export type JobSlashLiquidityEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    _job: string;
    _liquidity: string;
    _slasher: string;
    _amount: BigNumber;
  }
>;

export type JobSlashTokenEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    _job: string;
    _token: string;
    _slasher: string;
    _amount: BigNumber;
  }
>;

export type TokenCreditAdditionEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    _job: string;
    _token: string;
    _provider: string;
    _amount: BigNumber;
  }
>;

export type TokenCreditWithdrawalEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    _job: string;
    _token: string;
    _receiver: string;
    _amount: BigNumber;
  }
>;

export class IKeep3rJobDisputable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IKeep3rJobDisputableInterface;

  functions: {
    addTokenCreditsToJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    jobTokenCreditsAddedAt(
      _job: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _timestamp: BigNumber }>;

    slashTokenFromJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTokenCreditsFromJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addTokenCreditsToJob(
    _job: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  jobTokenCreditsAddedAt(
    _job: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  slashTokenFromJob(
    _job: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTokenCreditsFromJob(
    _job: string,
    _token: string,
    _amount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTokenCreditsToJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    jobTokenCreditsAddedAt(
      _job: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slashTokenFromJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokenCreditsFromJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "JobSlashLiquidity(address,address,address,uint256)"(
      _job?: string | null,
      _liquidity?: null,
      _slasher?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _job: string; _liquidity: string; _slasher: string; _amount: BigNumber }
    >;

    JobSlashLiquidity(
      _job?: string | null,
      _liquidity?: null,
      _slasher?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _job: string; _liquidity: string; _slasher: string; _amount: BigNumber }
    >;

    "JobSlashToken(address,address,address,uint256)"(
      _job?: string | null,
      _token?: null,
      _slasher?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _job: string; _token: string; _slasher: string; _amount: BigNumber }
    >;

    JobSlashToken(
      _job?: string | null,
      _token?: null,
      _slasher?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _job: string; _token: string; _slasher: string; _amount: BigNumber }
    >;

    "TokenCreditAddition(address,address,address,uint256)"(
      _job?: string | null,
      _token?: string | null,
      _provider?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _job: string; _token: string; _provider: string; _amount: BigNumber }
    >;

    TokenCreditAddition(
      _job?: string | null,
      _token?: string | null,
      _provider?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _job: string; _token: string; _provider: string; _amount: BigNumber }
    >;

    "TokenCreditWithdrawal(address,address,address,uint256)"(
      _job?: string | null,
      _token?: string | null,
      _receiver?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _job: string; _token: string; _receiver: string; _amount: BigNumber }
    >;

    TokenCreditWithdrawal(
      _job?: string | null,
      _token?: string | null,
      _receiver?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _job: string; _token: string; _receiver: string; _amount: BigNumber }
    >;
  };

  estimateGas: {
    addTokenCreditsToJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    jobTokenCreditsAddedAt(
      _job: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slashTokenFromJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTokenCreditsFromJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTokenCreditsToJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    jobTokenCreditsAddedAt(
      _job: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slashTokenFromJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokenCreditsFromJob(
      _job: string,
      _token: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
