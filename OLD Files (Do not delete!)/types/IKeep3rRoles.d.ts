/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IKeep3rRolesInterface extends ethers.utils.Interface {
  functions: {
    "addDisputer(address)": FunctionFragment;
    "addSlasher(address)": FunctionFragment;
    "disputers(address)": FunctionFragment;
    "removeDisputer(address)": FunctionFragment;
    "removeSlasher(address)": FunctionFragment;
    "slashers(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addDisputer", values: [string]): string;
  encodeFunctionData(functionFragment: "addSlasher", values: [string]): string;
  encodeFunctionData(functionFragment: "disputers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeDisputer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSlasher",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "slashers", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addDisputer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSlasher", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disputers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeDisputer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSlasher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slashers", data: BytesLike): Result;

  events: {
    "DisputerAdded(address)": EventFragment;
    "DisputerRemoved(address)": EventFragment;
    "SlasherAdded(address)": EventFragment;
    "SlasherRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DisputerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlasherAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlasherRemoved"): EventFragment;
}

export type DisputerAddedEvent = TypedEvent<[string] & { _disputer: string }>;

export type DisputerRemovedEvent = TypedEvent<[string] & { _disputer: string }>;

export type SlasherAddedEvent = TypedEvent<[string] & { _slasher: string }>;

export type SlasherRemovedEvent = TypedEvent<[string] & { _slasher: string }>;

export class IKeep3rRoles extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IKeep3rRolesInterface;

  functions: {
    addDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSlasher(
      _slasher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disputers(
      _disputer: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isDisputer: boolean }>;

    removeDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSlasher(
      _slasher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slashers(
      _slasher: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isSlasher: boolean }>;
  };

  addDisputer(
    _disputer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSlasher(
    _slasher: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disputers(_disputer: string, overrides?: CallOverrides): Promise<boolean>;

  removeDisputer(
    _disputer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSlasher(
    _slasher: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slashers(_slasher: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addDisputer(_disputer: string, overrides?: CallOverrides): Promise<void>;

    addSlasher(_slasher: string, overrides?: CallOverrides): Promise<void>;

    disputers(_disputer: string, overrides?: CallOverrides): Promise<boolean>;

    removeDisputer(_disputer: string, overrides?: CallOverrides): Promise<void>;

    removeSlasher(_slasher: string, overrides?: CallOverrides): Promise<void>;

    slashers(_slasher: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "DisputerAdded(address)"(
      _disputer?: null
    ): TypedEventFilter<[string], { _disputer: string }>;

    DisputerAdded(
      _disputer?: null
    ): TypedEventFilter<[string], { _disputer: string }>;

    "DisputerRemoved(address)"(
      _disputer?: null
    ): TypedEventFilter<[string], { _disputer: string }>;

    DisputerRemoved(
      _disputer?: null
    ): TypedEventFilter<[string], { _disputer: string }>;

    "SlasherAdded(address)"(
      _slasher?: null
    ): TypedEventFilter<[string], { _slasher: string }>;

    SlasherAdded(
      _slasher?: null
    ): TypedEventFilter<[string], { _slasher: string }>;

    "SlasherRemoved(address)"(
      _slasher?: null
    ): TypedEventFilter<[string], { _slasher: string }>;

    SlasherRemoved(
      _slasher?: null
    ): TypedEventFilter<[string], { _slasher: string }>;
  };

  estimateGas: {
    addDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSlasher(
      _slasher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disputers(_disputer: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSlasher(
      _slasher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slashers(_slasher: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSlasher(
      _slasher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disputers(
      _disputer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSlasher(
      _slasher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slashers(
      _slasher: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
