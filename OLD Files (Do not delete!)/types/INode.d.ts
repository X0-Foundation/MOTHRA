/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface INodeInterface extends ethers.utils.Interface {
  functions: {
    "begin(address)": FunctionFragment;
    "changePairStatus(address,address,address,uint8,address)": FunctionFragment;
    "setFeeRates(uint8,(uint32),address)": FunctionFragment;
    "setFeeStores((address),address)": FunctionFragment;
    "setNode(uint8,address,address)": FunctionFragment;
    "wire(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "begin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changePairStatus",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRates",
    values: [BigNumberish, { accountant: BigNumberish }, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeStores",
    values: [{ accountant: string }, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNode",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "wire",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "begin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changePairStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeStores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wire", data: BytesLike): Result;

  events: {
    "Begin()": EventFragment;
    "ChangePairStatus(address,address,address,uint8)": EventFragment;
    "DeenlistToken(address,address)": EventFragment;
    "SetFeeRates(uint8,tuple)": EventFragment;
    "SetFeeStores(tuple)": EventFragment;
    "SetNode(uint8,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Begin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangePairStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeenlistToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeRates"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeStores"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNode"): EventFragment;
}

export type BeginEvent = TypedEvent<[] & {}>;

export type ChangePairStatusEvent = TypedEvent<
  [string, string, string, number] & {
    pair: string;
    tokenA: string;
    tokenB: string;
    status: number;
  }
>;

export type DeenlistTokenEvent = TypedEvent<
  [string, string] & { token: string; msgSender: string }
>;

export type SetFeeRatesEvent = TypedEvent<
  [number, [number] & { accountant: number }] & {
    _sessionType: number;
    _feeRates: [number] & { accountant: number };
  }
>;

export type SetFeeStoresEvent = TypedEvent<
  [[string] & { accountant: string }] & {
    _feeStores: [string] & { accountant: string };
  }
>;

export type SetNodeEvent = TypedEvent<
  [number, string] & { nodeType: number; node: string }
>;

export class INode extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: INodeInterface;

  functions: {
    begin(
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changePairStatus(
      pair: string,
      token0: string,
      token1: string,
      status: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: { accountant: BigNumberish },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeStores(
      _feeStores: { accountant: string },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  begin(
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changePairStatus(
    pair: string,
    token0: string,
    token1: string,
    status: BigNumberish,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeRates(
    _sessionType: BigNumberish,
    _feeRates: { accountant: BigNumberish },
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeStores(
    _feeStores: { accountant: string },
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNode(
    nodeType: BigNumberish,
    node: string,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wire(
    _prevNode: string,
    _nextNode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    begin(caller: string, overrides?: CallOverrides): Promise<void>;

    changePairStatus(
      pair: string,
      token0: string,
      token1: string,
      status: BigNumberish,
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: { accountant: BigNumberish },
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeStores(
      _feeStores: { accountant: string },
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Begin()"(): TypedEventFilter<[], {}>;

    Begin(): TypedEventFilter<[], {}>;

    "ChangePairStatus(address,address,address,uint8)"(
      pair?: null,
      tokenA?: null,
      tokenB?: null,
      status?: null
    ): TypedEventFilter<
      [string, string, string, number],
      { pair: string; tokenA: string; tokenB: string; status: number }
    >;

    ChangePairStatus(
      pair?: null,
      tokenA?: null,
      tokenB?: null,
      status?: null
    ): TypedEventFilter<
      [string, string, string, number],
      { pair: string; tokenA: string; tokenB: string; status: number }
    >;

    "DeenlistToken(address,address)"(
      token?: null,
      msgSender?: null
    ): TypedEventFilter<[string, string], { token: string; msgSender: string }>;

    DeenlistToken(
      token?: null,
      msgSender?: null
    ): TypedEventFilter<[string, string], { token: string; msgSender: string }>;

    "SetFeeRates(uint8,tuple)"(
      _sessionType?: null,
      _feeRates?: null
    ): TypedEventFilter<
      [number, [number] & { accountant: number }],
      { _sessionType: number; _feeRates: [number] & { accountant: number } }
    >;

    SetFeeRates(
      _sessionType?: null,
      _feeRates?: null
    ): TypedEventFilter<
      [number, [number] & { accountant: number }],
      { _sessionType: number; _feeRates: [number] & { accountant: number } }
    >;

    "SetFeeStores(tuple)"(
      _feeStores?: null
    ): TypedEventFilter<
      [[string] & { accountant: string }],
      { _feeStores: [string] & { accountant: string } }
    >;

    SetFeeStores(
      _feeStores?: null
    ): TypedEventFilter<
      [[string] & { accountant: string }],
      { _feeStores: [string] & { accountant: string } }
    >;

    "SetNode(uint8,address)"(
      nodeType?: null,
      node?: null
    ): TypedEventFilter<[number, string], { nodeType: number; node: string }>;

    SetNode(
      nodeType?: null,
      node?: null
    ): TypedEventFilter<[number, string], { nodeType: number; node: string }>;
  };

  estimateGas: {
    begin(
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changePairStatus(
      pair: string,
      token0: string,
      token1: string,
      status: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: { accountant: BigNumberish },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeStores(
      _feeStores: { accountant: string },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    begin(
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changePairStatus(
      pair: string,
      token0: string,
      token1: string,
      status: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: { accountant: BigNumberish },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeStores(
      _feeStores: { accountant: string },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
