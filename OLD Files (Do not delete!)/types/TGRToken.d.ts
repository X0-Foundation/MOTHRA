/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TGRTokenInterface extends ethers.utils.Interface {
  functions: {
    "MAX_SUPPLY()": FunctionFragment;
    "_decreaseAllowance(address,address,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "begin(address)": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "changeBurnRates(uint256,uint256)": FunctionFragment;
    "changePairStatus(address,address,address,uint8,address)": FunctionFragment;
    "checkForConsistency()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "feeRates(uint8)": FunctionFragment;
    "feeStores()": FunctionFragment;
    "getCurrentActionType()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getState(address)": FunctionFragment;
    "htzFtm()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "lastSession()": FunctionFragment;
    "lp_reward()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nextNode()": FunctionFragment;
    "owner()": FunctionFragment;
    "pairFor(address,address)": FunctionFragment;
    "pairs(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "payFeeTgrLogic(address,uint256,(uint32),bool)": FunctionFragment;
    "prevNode()": FunctionFragment;
    "pulse_lp_reward()": FunctionFragment;
    "pulse_user_burn()": FunctionFragment;
    "pulse_vote_burn()": FunctionFragment;
    "registerAction(uint8,bool)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resume()": FunctionFragment;
    "returnVotes(uint256)": FunctionFragment;
    "session()": FunctionFragment;
    "sessionsLastSeenBySType(uint8)": FunctionFragment;
    "setFeeRates(uint8,(uint32),address)": FunctionFragment;
    "setFeeStores((address),address)": FunctionFragment;
    "setNode(uint8,address,address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "takeVotes(uint256)": FunctionFragment;
    "tgrBusd()": FunctionFragment;
    "tgrFtm()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferDirectSafe(address,address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unregisterAction()": FunctionFragment;
    "user_burn()": FunctionFragment;
    "vote_burn()": FunctionFragment;
    "wire(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_decreaseAllowance",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "begin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeBurnRates",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changePairStatus",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkForConsistency",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeStores", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentActionType",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "getState", values: [string]): string;
  encodeFunctionData(functionFragment: "htzFtm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSession",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lp_reward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nextNode", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairFor",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "pairs", values: [string]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payFeeTgrLogic",
    values: [string, BigNumberish, { accountant: BigNumberish }, boolean]
  ): string;
  encodeFunctionData(functionFragment: "prevNode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pulse_lp_reward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pulse_user_burn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pulse_vote_burn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerAction",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resume", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "returnVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "session", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sessionsLastSeenBySType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRates",
    values: [BigNumberish, { accountant: BigNumberish }, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeStores",
    values: [{ accountant: string }, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNode",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "takeVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tgrBusd", values?: undefined): string;
  encodeFunctionData(functionFragment: "tgrFtm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDirectSafe",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterAction",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "user_burn", values?: undefined): string;
  encodeFunctionData(functionFragment: "vote_burn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wire",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "begin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeBurnRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePairStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkForConsistency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeRates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeStores", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentActionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "htzFtm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lp_reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payFeeTgrLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prevNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pulse_lp_reward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pulse_user_burn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pulse_vote_burn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "session", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sessionsLastSeenBySType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeStores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takeVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tgrBusd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tgrFtm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferDirectSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "user_burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote_burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wire", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Begin()": EventFragment;
    "ChangePairStatus(address,address,address,uint8)": EventFragment;
    "DeenlistToken(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetFeeRates(uint8,tuple)": EventFragment;
    "SetFeeStores(tuple)": EventFragment;
    "SetNode(uint8,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Begin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangePairStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeenlistToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeRates"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeStores"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNode"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type BeginEvent = TypedEvent<[] & {}>;

export type ChangePairStatusEvent = TypedEvent<
  [string, string, string, number] & {
    pair: string;
    tokenA: string;
    tokenB: string;
    status: number;
  }
>;

export type DeenlistTokenEvent = TypedEvent<
  [string, string] & { token: string; msgSender: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetFeeRatesEvent = TypedEvent<
  [number, [number] & { accountant: number }] & {
    _sessionType: number;
    _feeRates: [number] & { accountant: number };
  }
>;

export type SetFeeStoresEvent = TypedEvent<
  [[string] & { accountant: string }] & {
    _feeStores: [string] & { accountant: string };
  }
>;

export type SetNodeEvent = TypedEvent<
  [number, string] & { nodeType: number; node: string }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export class TGRToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TGRTokenInterface;

  functions: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    _decreaseAllowance(
      _owner: string,
      _spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    begin(
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeBurnRates(
      _buysell_burn_rate: BigNumberish,
      _shift_burn_rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changePairStatus(
      pair: string,
      token0: string,
      token1: string,
      status: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkForConsistency(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        pending_collective: BigNumber;
        pending_marginal: BigNumber;
        abs_error: BigNumber;
        error_rate: BigNumber;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { accountant: number }>;

    feeStores(
      overrides?: CallOverrides
    ): Promise<[string] & { accountant: string }>;

    getCurrentActionType(overrides?: CallOverrides): Promise<[number]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getState(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalSupply: BigNumber;
        burnPending: BigNumber;
        burnDone: BigNumber;
        latestRound: BigNumber;
        latestNet: BigNumber;
        magic: BigNumber;
        u_VIRTUAL: BigNumber;
        u_balances: BigNumber;
        u_pending: BigNumber;
        u_latestDecayRound: BigNumber;
      }
    >;

    htzFtm(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastSession(overrides?: CallOverrides): Promise<[BigNumber]>;

    lp_reward(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        latestBNumber: BigNumber;
        cycleBlocks: BigNumber;
        decayRate: BigNumber;
        account: string;
        sum_tokens: BigNumber;
        burnDone: BigNumber;
        latestRound: BigNumber;
        initialRound: BigNumber;
        latestNet: BigNumber;
        magic: BigNumber;
      }
    >;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextNode(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairFor(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        token0: string;
        token1: string;
        status: number;
      }
    >;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    payFeeTgrLogic(
      account: string,
      principal: BigNumberish,
      rates: { accountant: BigNumberish },
      fromAllowance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    prevNode(overrides?: CallOverrides): Promise<[string]>;

    pulse_lp_reward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pulse_user_burn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pulse_vote_burn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAction(
      actionType: BigNumberish,
      blockReentry: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnVotes(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    session(overrides?: CallOverrides): Promise<[BigNumber]>;

    sessionsLastSeenBySType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: { accountant: BigNumberish },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeStores(
      _feeStores: { accountant: string },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    takeVotes(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tgrBusd(overrides?: CallOverrides): Promise<[string]>;

    tgrFtm(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferDirectSafe(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unregisterAction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    user_burn(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        latestBNumber: BigNumber;
        cycleBlocks: BigNumber;
        decayRate: BigNumber;
        account: string;
        sum_tokens: BigNumber;
        burnDone: BigNumber;
        latestRound: BigNumber;
        initialRound: BigNumber;
        latestNet: BigNumber;
        magic: BigNumber;
      }
    >;

    vote_burn(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        latestBNumber: BigNumber;
        cycleBlocks: BigNumber;
        decayRate: BigNumber;
        account: string;
        sum_tokens: BigNumber;
        burnDone: BigNumber;
        latestRound: BigNumber;
        initialRound: BigNumber;
        latestNet: BigNumber;
        magic: BigNumber;
      }
    >;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  _decreaseAllowance(
    _owner: string,
    _spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  begin(
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(
    from: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeBurnRates(
    _buysell_burn_rate: BigNumberish,
    _shift_burn_rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changePairStatus(
    pair: string,
    token0: string,
    token1: string,
    status: BigNumberish,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkForConsistency(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      pending_collective: BigNumber;
      pending_marginal: BigNumber;
      abs_error: BigNumber;
      error_rate: BigNumber;
    }
  >;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeRates(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  feeStores(overrides?: CallOverrides): Promise<string>;

  getCurrentActionType(overrides?: CallOverrides): Promise<number>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getState(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      totalSupply: BigNumber;
      burnPending: BigNumber;
      burnDone: BigNumber;
      latestRound: BigNumber;
      latestNet: BigNumber;
      magic: BigNumber;
      u_VIRTUAL: BigNumber;
      u_balances: BigNumber;
      u_pending: BigNumber;
      u_latestDecayRound: BigNumber;
    }
  >;

  htzFtm(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastSession(overrides?: CallOverrides): Promise<BigNumber>;

  lp_reward(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      latestBNumber: BigNumber;
      cycleBlocks: BigNumber;
      decayRate: BigNumber;
      account: string;
      sum_tokens: BigNumber;
      burnDone: BigNumber;
      latestRound: BigNumber;
      initialRound: BigNumber;
      latestNet: BigNumber;
      magic: BigNumber;
    }
  >;

  mint(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nextNode(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairFor(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  pairs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & {
      token0: string;
      token1: string;
      status: number;
    }
  >;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  payFeeTgrLogic(
    account: string,
    principal: BigNumberish,
    rates: { accountant: BigNumberish },
    fromAllowance: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  prevNode(overrides?: CallOverrides): Promise<string>;

  pulse_lp_reward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pulse_user_burn(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pulse_vote_burn(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAction(
    actionType: BigNumberish,
    blockReentry: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resume(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnVotes(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  session(overrides?: CallOverrides): Promise<BigNumber>;

  sessionsLastSeenBySType(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setFeeRates(
    _sessionType: BigNumberish,
    _feeRates: { accountant: BigNumberish },
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeStores(
    _feeStores: { accountant: string },
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNode(
    nodeType: BigNumberish,
    node: string,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  takeVotes(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tgrBusd(overrides?: CallOverrides): Promise<string>;

  tgrFtm(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferDirectSafe(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unregisterAction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  user_burn(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      latestBNumber: BigNumber;
      cycleBlocks: BigNumber;
      decayRate: BigNumber;
      account: string;
      sum_tokens: BigNumber;
      burnDone: BigNumber;
      latestRound: BigNumber;
      initialRound: BigNumber;
      latestNet: BigNumber;
      magic: BigNumber;
    }
  >;

  vote_burn(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      latestBNumber: BigNumber;
      cycleBlocks: BigNumber;
      decayRate: BigNumber;
      account: string;
      sum_tokens: BigNumber;
      burnDone: BigNumber;
      latestRound: BigNumber;
      initialRound: BigNumber;
      latestNet: BigNumber;
      magic: BigNumber;
    }
  >;

  wire(
    _prevNode: string,
    _nextNode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    _decreaseAllowance(
      _owner: string,
      _spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    begin(caller: string, overrides?: CallOverrides): Promise<void>;

    burn(
      from: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeBurnRates(
      _buysell_burn_rate: BigNumberish,
      _shift_burn_rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changePairStatus(
      pair: string,
      token0: string,
      token1: string,
      status: BigNumberish,
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkForConsistency(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        pending_collective: BigNumber;
        pending_marginal: BigNumber;
        abs_error: BigNumber;
        error_rate: BigNumber;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    feeRates(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    feeStores(overrides?: CallOverrides): Promise<string>;

    getCurrentActionType(overrides?: CallOverrides): Promise<number>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getState(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalSupply: BigNumber;
        burnPending: BigNumber;
        burnDone: BigNumber;
        latestRound: BigNumber;
        latestNet: BigNumber;
        magic: BigNumber;
        u_VIRTUAL: BigNumber;
        u_balances: BigNumber;
        u_pending: BigNumber;
        u_latestDecayRound: BigNumber;
      }
    >;

    htzFtm(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastSession(overrides?: CallOverrides): Promise<BigNumber>;

    lp_reward(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        latestBNumber: BigNumber;
        cycleBlocks: BigNumber;
        decayRate: BigNumber;
        account: string;
        sum_tokens: BigNumber;
        burnDone: BigNumber;
        latestRound: BigNumber;
        initialRound: BigNumber;
        latestNet: BigNumber;
        magic: BigNumber;
      }
    >;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nextNode(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairFor(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    pairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        token0: string;
        token1: string;
        status: number;
      }
    >;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    payFeeTgrLogic(
      account: string,
      principal: BigNumberish,
      rates: { accountant: BigNumberish },
      fromAllowance: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prevNode(overrides?: CallOverrides): Promise<string>;

    pulse_lp_reward(overrides?: CallOverrides): Promise<void>;

    pulse_user_burn(overrides?: CallOverrides): Promise<void>;

    pulse_vote_burn(overrides?: CallOverrides): Promise<void>;

    registerAction(
      actionType: BigNumberish,
      blockReentry: boolean,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, boolean] & {
        actionType: number;
        session: BigNumber;
        lastSession: BigNumber;
        isUserAction: boolean;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resume(overrides?: CallOverrides): Promise<void>;

    returnVotes(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    session(overrides?: CallOverrides): Promise<BigNumber>;

    sessionsLastSeenBySType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: { accountant: BigNumberish },
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeStores(
      _feeStores: { accountant: string },
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    takeVotes(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    tgrBusd(overrides?: CallOverrides): Promise<string>;

    tgrFtm(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferDirectSafe(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterAction(overrides?: CallOverrides): Promise<void>;

    user_burn(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        latestBNumber: BigNumber;
        cycleBlocks: BigNumber;
        decayRate: BigNumber;
        account: string;
        sum_tokens: BigNumber;
        burnDone: BigNumber;
        latestRound: BigNumber;
        initialRound: BigNumber;
        latestNet: BigNumber;
        magic: BigNumber;
      }
    >;

    vote_burn(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        latestBNumber: BigNumber;
        cycleBlocks: BigNumber;
        decayRate: BigNumber;
        account: string;
        sum_tokens: BigNumber;
        burnDone: BigNumber;
        latestRound: BigNumber;
        initialRound: BigNumber;
        latestNet: BigNumber;
        magic: BigNumber;
      }
    >;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "Begin()"(): TypedEventFilter<[], {}>;

    Begin(): TypedEventFilter<[], {}>;

    "ChangePairStatus(address,address,address,uint8)"(
      pair?: null,
      tokenA?: null,
      tokenB?: null,
      status?: null
    ): TypedEventFilter<
      [string, string, string, number],
      { pair: string; tokenA: string; tokenB: string; status: number }
    >;

    ChangePairStatus(
      pair?: null,
      tokenA?: null,
      tokenB?: null,
      status?: null
    ): TypedEventFilter<
      [string, string, string, number],
      { pair: string; tokenA: string; tokenB: string; status: number }
    >;

    "DeenlistToken(address,address)"(
      token?: null,
      msgSender?: null
    ): TypedEventFilter<[string, string], { token: string; msgSender: string }>;

    DeenlistToken(
      token?: null,
      msgSender?: null
    ): TypedEventFilter<[string, string], { token: string; msgSender: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetFeeRates(uint8,tuple)"(
      _sessionType?: null,
      _feeRates?: null
    ): TypedEventFilter<
      [number, [number] & { accountant: number }],
      { _sessionType: number; _feeRates: [number] & { accountant: number } }
    >;

    SetFeeRates(
      _sessionType?: null,
      _feeRates?: null
    ): TypedEventFilter<
      [number, [number] & { accountant: number }],
      { _sessionType: number; _feeRates: [number] & { accountant: number } }
    >;

    "SetFeeStores(tuple)"(
      _feeStores?: null
    ): TypedEventFilter<
      [[string] & { accountant: string }],
      { _feeStores: [string] & { accountant: string } }
    >;

    SetFeeStores(
      _feeStores?: null
    ): TypedEventFilter<
      [[string] & { accountant: string }],
      { _feeStores: [string] & { accountant: string } }
    >;

    "SetNode(uint8,address)"(
      nodeType?: null,
      node?: null
    ): TypedEventFilter<[number, string], { nodeType: number; node: string }>;

    SetNode(
      nodeType?: null,
      node?: null
    ): TypedEventFilter<[number, string], { nodeType: number; node: string }>;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    _decreaseAllowance(
      _owner: string,
      _spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    begin(
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeBurnRates(
      _buysell_burn_rate: BigNumberish,
      _shift_burn_rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changePairStatus(
      pair: string,
      token0: string,
      token1: string,
      status: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkForConsistency(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeRates(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    feeStores(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentActionType(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getState(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    htzFtm(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastSession(overrides?: CallOverrides): Promise<BigNumber>;

    lp_reward(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextNode(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairFor(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    payFeeTgrLogic(
      account: string,
      principal: BigNumberish,
      rates: { accountant: BigNumberish },
      fromAllowance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    prevNode(overrides?: CallOverrides): Promise<BigNumber>;

    pulse_lp_reward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pulse_user_burn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pulse_vote_burn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAction(
      actionType: BigNumberish,
      blockReentry: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnVotes(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    session(overrides?: CallOverrides): Promise<BigNumber>;

    sessionsLastSeenBySType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: { accountant: BigNumberish },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeStores(
      _feeStores: { accountant: string },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    takeVotes(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tgrBusd(overrides?: CallOverrides): Promise<BigNumber>;

    tgrFtm(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferDirectSafe(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unregisterAction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    user_burn(overrides?: CallOverrides): Promise<BigNumber>;

    vote_burn(overrides?: CallOverrides): Promise<BigNumber>;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _decreaseAllowance(
      _owner: string,
      _spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    begin(
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeBurnRates(
      _buysell_burn_rate: BigNumberish,
      _shift_burn_rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changePairStatus(
      pair: string,
      token0: string,
      token1: string,
      status: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkForConsistency(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeStores(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentActionType(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getState(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    htzFtm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastSession(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lp_reward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairFor(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payFeeTgrLogic(
      account: string,
      principal: BigNumberish,
      rates: { accountant: BigNumberish },
      fromAllowance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    prevNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pulse_lp_reward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pulse_user_burn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pulse_vote_burn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAction(
      actionType: BigNumberish,
      blockReentry: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnVotes(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    session(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sessionsLastSeenBySType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: { accountant: BigNumberish },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeStores(
      _feeStores: { accountant: string },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takeVotes(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tgrBusd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tgrFtm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferDirectSafe(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unregisterAction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    user_burn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote_burn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
