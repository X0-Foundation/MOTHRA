/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DustCollectorForTest,
  DustCollectorForTestInterface,
} from "../DustCollectorForTest";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NoGovernanceZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyGovernance",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyPendingGovernance",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "DustSent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_pendingGovernance",
        type: "address",
      },
    ],
    name: "GovernanceProposal",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_governance",
        type: "address",
      },
    ],
    name: "GovernanceSet",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptGovernance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "governance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingGovernance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "sendDust",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_governance",
        type: "address",
      },
    ],
    name: "setGovernance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50338061002f5760405162b293ed60e81b815260040160405180910390fd5b600080546001600160a01b039092166001600160a01b03199092169190911790556106e78061005f6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063238efcbc1461005c5780635aa6e67514610066578063966abd0014610095578063ab033ea9146100a8578063f39c38a0146100bb575b600080fd5b6100646100ce565b005b600054610079906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6100646100a33660046105b9565b610157565b6100646100b63660046105f5565b61026d565b600154610079906001600160a01b031681565b6001546001600160a01b031633146100f957604051637ef5703160e11b815260040160405180910390fd5b60018054600080546001600160a01b0383166001600160a01b031991821681179092559091169091556040519081527fc73be659241aade67e9a059bcf21494955018b213dbd1179054ccf928b13f3b69060200160405180910390a1565b6000546001600160a01b03163314610182576040516354348f0360e01b815260040160405180910390fd5b6001600160a01b0381166101a95760405163d92e233d60e01b815260040160405180910390fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0384160161020a576040516001600160a01b0382169083156108fc029084906000818181858888f19350505050158015610204573d6000803e3d6000fd5b5061021e565b61021e6001600160a01b03841682846102ec565b604080516001600160a01b0385811682526020820185905283168183015290517f9a3055ded8c8b5f21bbf4946c5afab6e1fa8b3f057922658e5e1ade125fb0b1e9181900360600190a1505050565b6000546001600160a01b03163314610298576040516354348f0360e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fe987aaedf9d279143bdf1eee16cf1d0feb47742867d81083df8d6cd0a5ac857f9060200160405180910390a150565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261033e908490610343565b505050565b6000610398826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661041a9092919063ffffffff16565b80519091501561033e57808060200190518101906103b69190610610565b61033e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b60606104298484600085610433565b90505b9392505050565b6060824710156104945760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610411565b6001600160a01b0385163b6104eb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610411565b600080866001600160a01b031685876040516105079190610662565b60006040518083038185875af1925050503d8060008114610544576040519150601f19603f3d011682016040523d82523d6000602084013e610549565b606091505b5091509150610559828286610564565b979650505050505050565b6060831561057357508161042c565b8251156105835782518084602001fd5b8160405162461bcd60e51b8152600401610411919061067e565b80356001600160a01b03811681146105b457600080fd5b919050565b6000806000606084860312156105ce57600080fd5b6105d78461059d565b9250602084013591506105ec6040850161059d565b90509250925092565b60006020828403121561060757600080fd5b61042c8261059d565b60006020828403121561062257600080fd5b8151801515811461042c57600080fd5b60005b8381101561064d578181015183820152602001610635565b8381111561065c576000848401525b50505050565b60008251610674818460208701610632565b9190910192915050565b602081526000825180602084015261069d816040850160208701610632565b601f01601f1916919091016040019291505056fea2646970667358221220f32c46d2ebf820f868dee4a17d95c5968df29e3f7a33860ecc54d6d82c610db264736f6c634300080e0033";

export class DustCollectorForTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DustCollectorForTest> {
    return super.deploy(overrides || {}) as Promise<DustCollectorForTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DustCollectorForTest {
    return super.attach(address) as DustCollectorForTest;
  }
  connect(signer: Signer): DustCollectorForTest__factory {
    return super.connect(signer) as DustCollectorForTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DustCollectorForTestInterface {
    return new utils.Interface(_abi) as DustCollectorForTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DustCollectorForTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DustCollectorForTest;
  }
}
