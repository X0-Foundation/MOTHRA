/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IKeep3rHelper, IKeep3rHelperInterface } from "../IKeep3rHelper";

const _abi = [
  {
    inputs: [],
    name: "LiquidityPairInvalid",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_keeper",
        type: "address",
      },
    ],
    name: "bonds",
    outputs: [
      {
        internalType: "uint256",
        name: "_amountBonded",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bonds",
        type: "uint256",
      },
    ],
    name: "getPaymentParams",
    outputs: [
      {
        internalType: "uint256",
        name: "_boost",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneEthQuote",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_extra",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_pool",
        type: "address",
      },
    ],
    name: "getPoolTokens",
    outputs: [
      {
        internalType: "address",
        name: "_token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_gasUsed",
        type: "uint256",
      },
    ],
    name: "getRewardAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_keeper",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_gasUsed",
        type: "uint256",
      },
    ],
    name: "getRewardAmountFor",
    outputs: [
      {
        internalType: "uint256",
        name: "_kp3r",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bonds",
        type: "uint256",
      },
    ],
    name: "getRewardBoostFor",
    outputs: [
      {
        internalType: "uint256",
        name: "_rewardBoost",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_pool",
        type: "address",
      },
    ],
    name: "isKP3RToken0",
    outputs: [
      {
        internalType: "bool",
        name: "_isKP3RToken0",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_eth",
        type: "uint256",
      },
    ],
    name: "quote",
    outputs: [
      {
        internalType: "uint256",
        name: "_amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IKeep3rHelper__factory {
  static readonly abi = _abi;
  static createInterface(): IKeep3rHelperInterface {
    return new utils.Interface(_abi) as IKeep3rHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IKeep3rHelper {
    return new Contract(address, _abi, signerOrProvider) as IKeep3rHelper;
  }
}
